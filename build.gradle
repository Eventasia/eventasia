group 'com.github.eventasia'
version = "0.0.2.SNAPSHOT"

buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE')
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

apply plugin: 'io.codearte.nexus-staging'

subprojects {
    if (project.name == 'store' || project.name == 'stream') {
        return
    }

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    apply plugin: 'maven'
    apply plugin: 'signing'

    group = rootProject.group
    version = rootProject.version

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    plugins.withType(JavaPlugin) {
        jar{
            version = project.version
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        task sourcesJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        artifacts {
            archives jar
            archives javadocJar
            archives sourcesJar
        }
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        //https://github.com/Codearte/gradle-nexus-staging-plugin/
        nexusStaging {
            username = ossrhUsername
            password = ossrhPassword
        }

        //http:\/\/central.sonatype.org\/pages\/ossrh-guide.html#SonatypeOSSMavenRepositoryUsageGuide-8c.AutomatingReleasesinNexus2.4
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name "Eventasia"
                        packaging "jar"
                        description "Eventasia is a Event Sourcing Framework for use with Spring Boot"
                        url "https://github.com/Eventasia/eventasia"

                        scm {
                            url "scm:git@github.com:Eventasia/eventasia.git"
                            connection "scm:git@github.com:Eventasia/eventasia.git"
                            developerConnection "scm:git@github.com:Eventasia/eventasia.git"
                        }

                        licenses {
                            license {
                                name "The Apache Software License, Version 2.0"
                                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                                distribution "repo"
                            }
                        }

                        developers {
                            developer {
                                id "caioquirino"
                                name "Caio Quirino da Silva"
                            }
                            developer {
                                id "fesposito"
                                name "Fábio Espósito"
                            }
                        }
                    }
                }
            }
        }

    }

    /*publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    tasks["publish"].dependsOn tasks["publishToMavenLocal"]
    tasks["build"].dependsOn tasks["publish"]*/
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.14.1"
}
